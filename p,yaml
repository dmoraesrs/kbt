stages:
- stage: Build
  jobs:
  - job: Checkout    
    steps:
      - checkout: self
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/terraform.zip' 
      - task: PublishBuildArtifacts@1
        displayName: 'Publish agent artifact'
        inputs:
          artifactName: terraform
          pathToPublish: '$(Build.ArtifactStagingDirectory)/terraform.zip'



parameters:
- name: AgentPool
  type: string
- name: Environment
  type: string
- name: TerraformWorkspace
  type: string  
- name: SecureFileName
  type: string

stages:

- stage: Plan_${{parameters.Environment}}
  displayName: Plan ${{parameters.Environment}}
  dependsOn: Build
  jobs:
    - deployment: Plan
      displayName: Planning on ${{parameters.Environment}}        
      pool:
        name:   ${{ parameters.AgentPool }} 
        demands:
        - IAC -equals TF 
      strategy:
        runOnce:
          deploy:
            steps:              
              - task: DownloadSecureFile@1
                name: mySecureFile
                displayName: 'Download Secure File'
                inputs:
                  secureFile: ${{ parameters.SecureFileName }}
              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip' # string. Required. Archive file patterns. Default: **/*.zip.
                  destinationFolder: '$(Pipeline.Workspace)/drop'
              - script: |
                  set -e
                  echo "Export------------------------------------------------------------------------------------"
                  echo "" > ~/.gitconfig
                  #cat $(Agent.TempDirectory)/cloud-sql.json > /tmp/google.json

                  export GOOGLE_APPLICATION_CREDENTIALS="$(Agent.TempDirectory)/${{ parameters.SecureFileName }}"

                  git config --global http.sslVerify "false"
                  git config --global http.https://devops.mercantil.com.br.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"

                  echo "Terraform Init------------------------------------------------------------------------------------"

                  terraform init

                  echo "Terraform Validate------------------------------------------------------------------------------------"
                  terraform validate

                  echo "Validate Workspace Project-----------------------------------------------------------------------------"
                  terraform workspace list |grep ${{parameters.TerraformWorkspace}} || terraform workspace new ${{parameters.TerraformWorkspace}}

                  echo "Select workspace Project--------------------------------------------------------------------------------"
                  terraform workspace select ${{parameters.TerraformWorkspace}}

                  echo  "List Workspace------------------------------------------------------------------------------------"
                  terraform workspace list

                  echo "Terraform Plan------------------------------------------------------------------------------------"
                  terraform plan --var-file=./envs/${{parameters.TerraformWorkspace}}.tfvars -out=$(System.DefaultWorkingDirectory)/plano.${{parameters.TerraformWorkspace}}

                  echo "" > ~/.gitconfig
                workingDirectory: '$(Pipeline.Workspace)/drop/s'
                displayName: 'Terraform Plan'
                

- stage: Apply_${{parameters.Environment}}
  displayName: Apply ${{parameters.Environment}}
  dependsOn: Plan_${{parameters.Environment}}
  jobs:
    - deployment: Apply
      displayName: Applying on ${{parameters.Environment}}        
      pool:
        name:   ${{ parameters.AgentPool }} 
        demands:
        - IAC -equals TF
      environment:
        name: ${{parameters.Environment}}          
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadSecureFile@1
                name: mySecureFile
                displayName: 'Download Secure File'
                inputs:
                  secureFile: ${{ parameters.SecureFileName }}
              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip' # string. Required. Archive file patterns. Default: **/*.zip.
                  destinationFolder: '$(Pipeline.Workspace)/drop'
              - script: |
                  set -e
                  echo "Export------------------------------------------------------------------------------------"
                  echo "" > ~/.gitconfig
                  #cat $(Agent.TempDirectory)/cloud-sql.json > /tmp/google.json

                  export GOOGLE_APPLICATION_CREDENTIALS="$(Agent.TempDirectory)/${{ parameters.SecureFileName }}"

                  git config --global http.sslVerify "false"
                  git config --global http.https://devops.mercantil.com.br.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"

                  echo "Terraform Init------------------------------------------------------------------------------------"

                  terraform init

                  echo "Terraform Validate------------------------------------------------------------------------------------"
                  terraform validate

                  echo "Validate Workspace Project-----------------------------------------------------------------------------"
                  terraform workspace list |grep ${{parameters.TerraformWorkspace}} || terraform workspace new ${{parameters.TerraformWorkspace}}

                  echo "Select workspace Project--------------------------------------------------------------------------------"
                  terraform workspace select ${{parameters.TerraformWorkspace}}

                  echo  "List Workspace------------------------------------------------------------------------------------"
                  terraform workspace list

                  echo "Terraform Plan------------------------------------------------------------------------------------"
                  terraform plan --var-file=./envs/${{parameters.TerraformWorkspace}}.tfvars -out=$(System.DefaultWorkingDirectory)/plano.${{parameters.TerraformWorkspace}}
                  
                  terraform apply $(System.DefaultWorkingDirectory)/plano.${{parameters.TerraformWorkspace}}

                  echo "" > ~/.gitconfig
                workingDirectory: '$(Pipeline.Workspace)/drop/s'
                displayName: 'Terraform Apply'

- stage: Plan_Destroy_${{parameters.Environment}}
  displayName: Plan Destroy ${{parameters.Environment}}
  dependsOn: Build
  jobs:
    - deployment: Plan
      displayName: Planning on ${{parameters.Environment}}        
      pool:
        name:   ${{ parameters.AgentPool }} 
        demands:
        - IAC -equals TF
      environment:
        name: ${{parameters.Environment}}          
      strategy:
        runOnce:
          deploy:
            steps:              
              - task: DownloadSecureFile@1
                name: mySecureFile
                displayName: 'Download Secure File'
                inputs:
                  secureFile: ${{ parameters.SecureFileName }}
              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip' # string. Required. Archive file patterns. Default: **/*.zip.
                  destinationFolder: '$(Pipeline.Workspace)/drop'
              - script: |
                  set -e
                  echo "Export------------------------------------------------------------------------------------"
                  echo "" > ~/.gitconfig
                  #cat $(Agent.TempDirectory)/cloud-sql.json > /tmp/google.json

                  export GOOGLE_APPLICATION_CREDENTIALS="$(Agent.TempDirectory)/${{ parameters.SecureFileName }}"

                  git config --global http.sslVerify "false"
                  git config --global http.https://devops.mercantil.com.br.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"

                  echo "Terraform Init------------------------------------------------------------------------------------"

                  terraform init

                  echo "Terraform Validate------------------------------------------------------------------------------------"
                  terraform validate

                  echo "Validate Workspace Project-----------------------------------------------------------------------------"
                  terraform workspace list |grep ${{parameters.TerraformWorkspace}} || terraform workspace new ${{parameters.TerraformWorkspace}}

                  echo "Select workspace Project--------------------------------------------------------------------------------"
                  terraform workspace select ${{parameters.TerraformWorkspace}}

                  echo  "List Workspace------------------------------------------------------------------------------------"
                  terraform workspace list

                  echo "Terraform Plan Destroy------------------------------------------------------------------------------------"
                  terraform plan --destroy --var-file=./envs/${{parameters.TerraformWorkspace}}.tfvars -out=$(System.DefaultWorkingDirectory)/plano.${{parameters.TerraformWorkspace}}

                  echo "" > ~/.gitconfig
                workingDirectory: '$(Pipeline.Workspace)/drop/s'
                displayName: 'Terraform Plan'

- stage: Destroy_${{parameters.Environment}}
  displayName: Destroy ${{parameters.Environment}}
  dependsOn: Plan_Destroy_${{parameters.Environment}}
  jobs:
    - deployment: Destroy
      displayName: Destroy ${{parameters.Environment}}        
      pool:
        name:   ${{ parameters.AgentPool }} 
        demands:
        - IAC -equals TF
      environment:
        name: ${{parameters.Environment}}          
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadSecureFile@1
                name: mySecureFile
                displayName: 'Download Secure File'
                inputs:
                  secureFile: ${{ parameters.SecureFileName }}
              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip' # string. Required. Archive file patterns. Default: **/*.zip.
                  destinationFolder: '$(Pipeline.Workspace)/drop'
              - script: |
                  set -e
                  echo "Export------------------------------------------------------------------------------------"
                  echo "" > ~/.gitconfig

                  export GOOGLE_APPLICATION_CREDENTIALS="$(Agent.TempDirectory)/${{ parameters.SecureFileName }}"

                  git config --global http.sslVerify "false"
                  git config --global http.https://devops.mercantil.com.br.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"

                  echo "Terraform Init------------------------------------------------------------------------------------"

                  terraform init

                  echo "Terraform Validate------------------------------------------------------------------------------------"
                  terraform validate

                  echo "Validate Workspace Project-----------------------------------------------------------------------------"
                  terraform workspace list |grep ${{parameters.TerraformWorkspace}} || terraform workspace new ${{parameters.TerraformWorkspace}}

                  echo "Select workspace Project--------------------------------------------------------------------------------"
                  terraform workspace select ${{parameters.TerraformWorkspace}}
                  
                  echo "Terrafrom Destroy--------------------------------------------------------------------------------"
                  terraform destroy --auto-approve --var-file=./envs/${{parameters.TerraformWorkspace}}.tfvars

                  echo "" > ~/.gitconfig
                workingDirectory: '$(Pipeline.Workspace)/drop/s'
                displayName: 'Terraform Destroy'
